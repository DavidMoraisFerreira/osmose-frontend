#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Copyright 2011 Jocelyn Jaubert
#
# This file is part of Osmose.
#
# Openstreetbugs is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Openstreetbugs is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Openstreetbugs. If not, see <http://www.gnu.org/licenses/>.
#

import cgi, re, sys, os
root_folder = os.environ["OSMOSE_ROOT"]
sys.path.append(root_folder)
from tools import utils

translate = utils.translator()

print "Content-type: text/plain; Charset=UTF-8\n"

form = cgi.FieldStorage()

minlat = int(float(form.getfirst("b", "-180")) * 1000000)
maxlat = int(float(form.getfirst("t", "180")) * 1000000)
minlon = int(float(form.getfirst("l", "-90")) * 1000000)
maxlon = int(float(form.getfirst("r", "90")) * 1000000)
user = form.getfirst("user", "")
num_points = form.getvalue("points", 100)
class_ = form.getvalue("class", "")

lat = int((minlat + maxlat) / 2)
lon = int((minlon + maxlon) / 2)

err_id = form.getvalue("item", "").split(",")
err_id = ",".join([str(int(x)) for x in err_id if x])

not_err_id = form.getvalue("not_item", "").split(",")
not_err_id = ",".join([str(int(x)) for x in not_err_id if x])

sqlbase  = """
SELECT m.id,
       m.item,
       m.source,
       m.class,
       m.elems,
       m.subclass,
       m.lat,
       m.lon,
       dynpoi_class.title as title,
       m.subtitle as subtitle,
       dynpoi_update_last.timestamp,
       u.username
FROM marker m
INNER JOIN dynpoi_class
  ON m.source=dynpoi_class.source AND m.class=dynpoi_class.class
INNER JOIN dynpoi_update_last
  ON m.source = dynpoi_update_last.source
LEFT JOIN marker_elem u ON m.id = u.marker_id
WHERE (m.lat BETWEEN %s AND %s) AND (m.lon BETWEEN %s and %s) AND """

sql_arg = [minlat, maxlat, minlon, maxlon]

if err_id:
    sqlbase += "m.item IN (%s) AND " % err_id

if not_err_id:
    sqlbase += "m.item NOT IN (%s) AND " % not_err_id

if class_:
    sqlbase += "m.class IN (%s) AND "
    sql_arg.append(class_)

if user:
    sqlbase += "u.username = %s AND "
    sql_arg.append(user)

sqlbase += """
  1 = 1
ORDER BY dynpoi_update_last.timestamp DESC """

if not user:
  if num_points != "all":
    sqlbase += "LIMIT %d;" % int(num_points)

PgConn    = utils.get_dbconn()
PgCursor  = PgConn.cursor()
PgCursor.execute(sqlbase, tuple(sql_arg))

print "# timestamp, username, error_id, lon, lat, title, subtitle, item"

num = 0
res = PgCursor.fetchone()
while res:
    num += 1
    lat       = float(res["lat"]) / 1000000
    lon       = float(res["lon"]) / 1000000
    error_id  = res["id"]
    title     = translate.select(res["title_cur"])
    subtitle  = translate.select(res["subtitle_cur"])
    item      = res["item"] or 0

    print '"%s", "%s", "%s", %f, %f, "%s", "%s", "%s"' % (res["timestamp"], res["username"], error_id, lon, lat, title, subtitle, item)

    res = PgCursor.fetchone()
